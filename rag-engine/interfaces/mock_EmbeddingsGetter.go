// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package interfaces

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockEmbeddingsGetter creates a new instance of MockEmbeddingsGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmbeddingsGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmbeddingsGetter {
	mock := &MockEmbeddingsGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEmbeddingsGetter is an autogenerated mock type for the EmbeddingsGetter type
type MockEmbeddingsGetter struct {
	mock.Mock
}

type MockEmbeddingsGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmbeddingsGetter) EXPECT() *MockEmbeddingsGetter_Expecter {
	return &MockEmbeddingsGetter_Expecter{mock: &_m.Mock}
}

// GetEmbeddings provides a mock function for the type MockEmbeddingsGetter
func (_mock *MockEmbeddingsGetter) GetEmbeddings(text string) ([]float64, error) {
	ret := _mock.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for GetEmbeddings")
	}

	var r0 []float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]float64, error)); ok {
		return returnFunc(text)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []float64); ok {
		r0 = returnFunc(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(text)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEmbeddingsGetter_GetEmbeddings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmbeddings'
type MockEmbeddingsGetter_GetEmbeddings_Call struct {
	*mock.Call
}

// GetEmbeddings is a helper method to define mock.On call
//   - text string
func (_e *MockEmbeddingsGetter_Expecter) GetEmbeddings(text interface{}) *MockEmbeddingsGetter_GetEmbeddings_Call {
	return &MockEmbeddingsGetter_GetEmbeddings_Call{Call: _e.mock.On("GetEmbeddings", text)}
}

func (_c *MockEmbeddingsGetter_GetEmbeddings_Call) Run(run func(text string)) *MockEmbeddingsGetter_GetEmbeddings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEmbeddingsGetter_GetEmbeddings_Call) Return(float64s []float64, err error) *MockEmbeddingsGetter_GetEmbeddings_Call {
	_c.Call.Return(float64s, err)
	return _c
}

func (_c *MockEmbeddingsGetter_GetEmbeddings_Call) RunAndReturn(run func(text string) ([]float64, error)) *MockEmbeddingsGetter_GetEmbeddings_Call {
	_c.Call.Return(run)
	return _c
}

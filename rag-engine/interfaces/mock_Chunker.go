// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package interfaces

import (
	"rag-engine/app/models/schema"

	"github.com/jdkato/prose/v2"
	mock "github.com/stretchr/testify/mock"
)

// NewMockChunker creates a new instance of MockChunker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunker {
	mock := &MockChunker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockChunker is an autogenerated mock type for the Chunker type
type MockChunker struct {
	mock.Mock
}

type MockChunker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunker) EXPECT() *MockChunker_Expecter {
	return &MockChunker_Expecter{mock: &_m.Mock}
}

// ProcessDocument provides a mock function for the type MockChunker
func (_mock *MockChunker) ProcessDocument(documents []prose.Document, stringToString map[string]string) ([]schema.ChunkedDocument, error) {
	ret := _mock.Called(documents, stringToString)

	if len(ret) == 0 {
		panic("no return value specified for ProcessDocument")
	}

	var r0 []schema.ChunkedDocument
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]prose.Document, map[string]string) ([]schema.ChunkedDocument, error)); ok {
		return returnFunc(documents, stringToString)
	}
	if returnFunc, ok := ret.Get(0).(func([]prose.Document, map[string]string) []schema.ChunkedDocument); ok {
		r0 = returnFunc(documents, stringToString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.ChunkedDocument)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]prose.Document, map[string]string) error); ok {
		r1 = returnFunc(documents, stringToString)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChunker_ProcessDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessDocument'
type MockChunker_ProcessDocument_Call struct {
	*mock.Call
}

// ProcessDocument is a helper method to define mock.On call
//   - documents []prose.Document
//   - stringToString map[string]string
func (_e *MockChunker_Expecter) ProcessDocument(documents interface{}, stringToString interface{}) *MockChunker_ProcessDocument_Call {
	return &MockChunker_ProcessDocument_Call{Call: _e.mock.On("ProcessDocument", documents, stringToString)}
}

func (_c *MockChunker_ProcessDocument_Call) Run(run func(documents []prose.Document, stringToString map[string]string)) *MockChunker_ProcessDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []prose.Document
		if args[0] != nil {
			arg0 = args[0].([]prose.Document)
		}
		var arg1 map[string]string
		if args[1] != nil {
			arg1 = args[1].(map[string]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockChunker_ProcessDocument_Call) Return(chunkedDocuments []schema.ChunkedDocument, err error) *MockChunker_ProcessDocument_Call {
	_c.Call.Return(chunkedDocuments, err)
	return _c
}

func (_c *MockChunker_ProcessDocument_Call) RunAndReturn(run func(documents []prose.Document, stringToString map[string]string) ([]schema.ChunkedDocument, error)) *MockChunker_ProcessDocument_Call {
	_c.Call.Return(run)
	return _c
}
